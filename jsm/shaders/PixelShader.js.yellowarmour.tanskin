/**
 * @author wongbryan / http://wongbryan.github.io
 *
 * Pixelation shader
 */



var PixelShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"resolution": { value: null },
		"pixelSize": { value: 1. },

	},

	vertexShader: [

		"varying highp vec2 vUv;",

		"void main() {",

		"vUv = uv;",
		"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

		"}"

	].join( "\n" ),

	fragmentShader: [

		"uniform sampler2D tDiffuse;",
		"uniform float pixelSize;",
		"uniform vec2 resolution;",

		"varying highp vec2 vUv;",

		"vec3 rgb2hsv(vec3 c)",
		"{",
		"	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);",
		"	vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);",
		"	vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);",
		
		"	float d = q.x - min(q.w, q.y);",
		"   float e = 1.0e-10;",
		"	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);",
		"}",

		"vec3 hsv2rgb(vec3 c)",
		"{",
		"	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);",
		"	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);",
		"	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);",
		"}",

		"void main() {",

		"vec2 dxy = pixelSize / resolution;",
		"vec2 coord = dxy * floor( vUv / dxy );",
		"vec4 pixelColor = texture2D(tDiffuse, coord);",
		"vec3 hsvColor = rgb2hsv(vec3(pixelColor.r, pixelColor.g, pixelColor.b));",
		"float color[10];",
		"color[0] = 0.0;",
		"color[1] = 20.0/360.0;",
		"color[2] = 30.0/360.0;",
		"color[3] = 40.0/360.0;",
		"color[4] = 50.0/360.0;",
		"color[5] = 110.0/360.0;",
		"color[6] = 200.0/360.0;",
		"color[7] = 275.0/360.0;",
		"color[8] = 275.0/360.0;",
		"color[9] = 275.0/360.0;",
		"float minDistance = abs(hsvColor.x - color[0]);",
		"float currentDistance;",
		"float closestColor = color[0];",
		"for(int i = 1; i < 10; i++) {",
		"  currentDistance = abs(hsvColor.x - color[i]);",
		"  if(currentDistance <= minDistance) {",
		"    minDistance = currentDistance;",
		"    closestColor = color[i];",
		"  }",
		"}",
		"if (hsvColor.y < 0.3)",
		"  gl_FragColor = vec4(rgb2hsv(vec3(0.0, 0.0, hsvColor.z)), 1.0);",
		"else",
		"  gl_FragColor = vec4(hsv2rgb(vec3(closestColor, 0.7, 0.6)), 1.0);",
		"}"

	].join( "\n" )
};

export { PixelShader };
