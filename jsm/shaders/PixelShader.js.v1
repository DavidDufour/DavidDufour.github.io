/**
 * @author wongbryan / http://wongbryan.github.io
 *
 * Pixelation shader
 */



var PixelShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"resolution": { value: null },
		"pixelSize": { value: 1. },

	},

	vertexShader: [

		"varying highp vec2 vUv;",

		"void main() {",

		"vUv = uv;",
		"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

		"}"

	].join( "\n" ),

	fragmentShader: [

		"uniform sampler2D tDiffuse;",
		"uniform float pixelSize;",
		"uniform vec2 resolution;",

		"varying highp vec2 vUv;",

		"void main() {",

		"vec2 dxy = pixelSize / resolution;",
		"vec2 coord = dxy * floor( vUv / dxy );",
		"vec4 pixelColor = texture2D(tDiffuse, coord);",
		"vec4 color[17];",
		"color[0] = vec4(217.0/255.0,176.0/255.0,118.0/255.0,0);",
		"color[1] = vec4(153.0/255.0,125.0/255.0,85.0/255.0,0);",
		"color[2] = vec4(88.0/255.0,72.0/255.0,51.0/255.0,0);",
		"color[3] = vec4(142.0/255.0,121.0/255.0,72.0/255.0,0);",
		"color[4] = vec4(101.0/255.0,86.0/255.0,51.0/255.0,0);",
		"color[5] = vec4(56.0/255.0,48.0/255.0,28.0/255.0,0);",
		"color[6] = vec4(27.0/255.0,26.0/255.0,26.0/255.0,0);",
		"color[7] = vec4(16.0/255.0,17.0/255.0,17.0/255.0,0);",
		"color[8] = vec4(9.0/255.0,9.0/255.0,9.0/255.0,0);",
		"color[9] = vec4(44.0/255.0,4.0/255.0,44.0/255.0,0);",
		"color[10] = vec4(32.0/255.0,32.0/255.0,32.0/255.0,0);",
		"color[11] = vec4(18.0/255.0,18.0/255.0,18.0/255.0,0);",
		"color[12] = vec4(202.0/255.0,116.0/255.0,84.0/255.0,0);",
		"color[13] = vec4(140.0/255.0,80.0/255.0,57.0/255.0,0);",
		"color[14] = vec4(76.0/255.0,32.0/255.0,26.0/255.0,0);",
		"color[15] = vec4(54.0/255.0,22.0/255.0,19.0/255.0,0);",
		"color[16] = vec4(255.0/255.0,255.0/255.0,255.0/255.0,0);",
		"float minDistance = distance(pixelColor, color[0]);",
		//vec2 distanceVector = uv - centerPoint;
		//float dist = sqrt(dot(distanceVector, distanceVector));
		"float currentDistance;",
		"int closestColor = 0;",
		"for(int i = 0; i < 17; i++) {",
		"  currentDistance = distance(pixelColor, color[i]);",
		"  if(currentDistance <= minDistance) {",
		"    minDistance = currentDistance;",
		"    gl_FragColor = color[i];",
		"  }",
		"}",

		"}"

	].join( "\n" )
};

export { PixelShader };
